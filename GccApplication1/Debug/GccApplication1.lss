
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00000c3a  00000cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  008001b2  008001b2  00000d80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000df0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a9e  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b42  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef7  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ba  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011b2  00000000  00000000  00004e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 3b       	cpi	r26, 0xB2	; 178
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 eb       	ldi	r26, 0xB2	; 178
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3e       	cpi	r26, 0xE8	; 232
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c2 d4       	rcall	.+2436   	; 0xa48 <main>
  c4:	b8 c5       	rjmp	.+2928   	; 0xc36 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
	LCD_Command (0x80);		/* cursor at home position */
  c8:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <_avr_timer_M>
  cc:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <_avr_timer_M+0x1>
  d0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_M+0x2>
  d4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_M+0x3>
  d8:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <_avr_timer_cntcurr>
  dc:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <_avr_timer_cntcurr+0x1>
  e0:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <_avr_timer_cntcurr+0x2>
  e4:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_avr_timer_M>
 10e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_avr_timer_M+0x1>
 112:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <_avr_timer_M+0x2>
 116:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <_avr_timer_M+0x3>
 11a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_avr_timer_cntcurr>
 11e:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_avr_timer_cntcurr+0x1>
 122:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <_avr_timer_cntcurr+0x2>
 126:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_avr_timer_cntcurr>
 148:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <_avr_timer_cntcurr+0x2>
 150:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_avr_timer_cntcurr>
 15e:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_avr_timer_cntcurr+0x1>
 162:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <_avr_timer_cntcurr+0x2>
 166:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <TimerFlag>
 178:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_avr_timer_M>
 17c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_avr_timer_M+0x1>
 180:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <_avr_timer_M+0x2>
 184:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <_avr_timer_M+0x3>
 188:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_avr_timer_cntcurr>
 18c:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_avr_timer_cntcurr+0x1>
 190:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <_avr_timer_cntcurr+0x2>
 194:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <GetKeypadKey>:
 1aa:	8f ee       	ldi	r24, 0xEF	; 239
 1ac:	82 b9       	out	0x02, r24	; 2
 1ae:	00 00       	nop
 1b0:	00 9b       	sbis	0x00, 0	; 0
 1b2:	29 c0       	rjmp	.+82     	; 0x206 <GetKeypadKey+0x5c>
 1b4:	01 9b       	sbis	0x00, 1	; 0
 1b6:	29 c0       	rjmp	.+82     	; 0x20a <GetKeypadKey+0x60>
 1b8:	02 9b       	sbis	0x00, 2	; 0
 1ba:	29 c0       	rjmp	.+82     	; 0x20e <GetKeypadKey+0x64>
 1bc:	03 9b       	sbis	0x00, 3	; 0
 1be:	29 c0       	rjmp	.+82     	; 0x212 <GetKeypadKey+0x68>
 1c0:	8f ed       	ldi	r24, 0xDF	; 223
 1c2:	82 b9       	out	0x02, r24	; 2
 1c4:	00 00       	nop
 1c6:	00 9b       	sbis	0x00, 0	; 0
 1c8:	26 c0       	rjmp	.+76     	; 0x216 <GetKeypadKey+0x6c>
 1ca:	01 9b       	sbis	0x00, 1	; 0
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <GetKeypadKey+0x70>
 1ce:	02 9b       	sbis	0x00, 2	; 0
 1d0:	26 c0       	rjmp	.+76     	; 0x21e <GetKeypadKey+0x74>
 1d2:	03 9b       	sbis	0x00, 3	; 0
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <GetKeypadKey+0x78>
 1d6:	8f eb       	ldi	r24, 0xBF	; 191
 1d8:	82 b9       	out	0x02, r24	; 2
 1da:	00 00       	nop
 1dc:	00 9b       	sbis	0x00, 0	; 0
 1de:	23 c0       	rjmp	.+70     	; 0x226 <GetKeypadKey+0x7c>
 1e0:	01 9b       	sbis	0x00, 1	; 0
 1e2:	23 c0       	rjmp	.+70     	; 0x22a <GetKeypadKey+0x80>
 1e4:	02 9b       	sbis	0x00, 2	; 0
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <GetKeypadKey+0x84>
 1e8:	03 9b       	sbis	0x00, 3	; 0
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <GetKeypadKey+0x88>
 1ec:	8f e7       	ldi	r24, 0x7F	; 127
 1ee:	82 b9       	out	0x02, r24	; 2
 1f0:	00 00       	nop
 1f2:	00 9b       	sbis	0x00, 0	; 0
 1f4:	20 c0       	rjmp	.+64     	; 0x236 <GetKeypadKey+0x8c>
 1f6:	01 9b       	sbis	0x00, 1	; 0
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <GetKeypadKey+0x90>
 1fa:	02 9b       	sbis	0x00, 2	; 0
 1fc:	20 c0       	rjmp	.+64     	; 0x23e <GetKeypadKey+0x94>
 1fe:	03 9b       	sbis	0x00, 3	; 0
 200:	20 c0       	rjmp	.+64     	; 0x242 <GetKeypadKey+0x98>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	08 95       	ret
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	08 95       	ret
 20e:	87 e3       	ldi	r24, 0x37	; 55
 210:	08 95       	ret
 212:	8a e2       	ldi	r24, 0x2A	; 42
 214:	08 95       	ret
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	08 95       	ret
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	08 95       	ret
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	08 95       	ret
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	08 95       	ret
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	08 95       	ret
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	08 95       	ret
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	08 95       	ret
 232:	83 e2       	ldi	r24, 0x23	; 35
 234:	08 95       	ret
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	08 95       	ret
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	08 95       	ret
 23e:	83 e4       	ldi	r24, 0x43	; 67
 240:	08 95       	ret
 242:	84 e4       	ldi	r24, 0x44	; 68
 244:	08 95       	ret

00000246 <keypadTick>:
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
 24c:	ae df       	rcall	.-164    	; 0x1aa <GetKeypadKey>
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <keyPressed+0x1>
 254:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <keyPressed>
 258:	c1 30       	cpi	r28, 0x01	; 1
 25a:	d1 05       	cpc	r29, r1
 25c:	49 f1       	breq	.+82     	; 0x2b0 <keypadTick+0x6a>
 25e:	c2 30       	cpi	r28, 0x02	; 2
 260:	d1 05       	cpc	r29, r1
 262:	51 f0       	breq	.+20     	; 0x278 <keypadTick+0x32>
 264:	20 97       	sbiw	r28, 0x00	; 0
 266:	59 f4       	brne	.+22     	; 0x27e <keypadTick+0x38>
 268:	31 e0       	ldi	r19, 0x01	; 1
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	09 f4       	brne	.+2      	; 0x272 <keypadTick+0x2c>
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	c3 2f       	mov	r28, r19
 274:	d2 2f       	mov	r29, r18
 276:	03 c0       	rjmp	.+6      	; 0x27e <keypadTick+0x38>
 278:	89 2b       	or	r24, r25
 27a:	f9 f4       	brne	.+62     	; 0x2ba <keypadTick+0x74>
 27c:	1c c0       	rjmp	.+56     	; 0x2b6 <keypadTick+0x70>
 27e:	c1 30       	cpi	r28, 0x01	; 1
 280:	d1 05       	cpc	r29, r1
 282:	d9 f4       	brne	.+54     	; 0x2ba <keypadTick+0x74>
 284:	83 34       	cpi	r24, 0x43	; 67
 286:	91 05       	cpc	r25, r1
 288:	41 f4       	brne	.+16     	; 0x29a <keypadTick+0x54>
 28a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <playCrusor>
 28e:	81 31       	cpi	r24, 0x11	; 17
 290:	a1 f4       	brne	.+40     	; 0x2ba <keypadTick+0x74>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <playCrusor>
 298:	10 c0       	rjmp	.+32     	; 0x2ba <keypadTick+0x74>
 29a:	84 34       	cpi	r24, 0x44	; 68
 29c:	91 05       	cpc	r25, r1
 29e:	69 f4       	brne	.+26     	; 0x2ba <keypadTick+0x74>
 2a0:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <playCrusor>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	49 f4       	brne	.+18     	; 0x2ba <keypadTick+0x74>
 2a8:	81 e1       	ldi	r24, 0x11	; 17
 2aa:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <playCrusor>
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <keypadTick+0x74>
 2b0:	c2 e0       	ldi	r28, 0x02	; 2
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <keypadTick+0x74>
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	ce 01       	movw	r24, r28
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <LCD_Command>:
 2c2:	88 b9       	out	0x08, r24	; 8
 2c4:	5e 98       	cbi	0x0b, 6	; 11
 2c6:	5d 98       	cbi	0x0b, 5	; 11
 2c8:	5f 9a       	sbi	0x0b, 7	; 11
 2ca:	00 00       	nop
 2cc:	5f 98       	cbi	0x0b, 7	; 11
 2ce:	83 ef       	ldi	r24, 0xF3	; 243
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_Command+0x10>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_Command+0x16>
 2d8:	00 00       	nop
 2da:	08 95       	ret

000002dc <LCD_Char>:
 2dc:	88 b9       	out	0x08, r24	; 8
 2de:	5e 9a       	sbi	0x0b, 6	; 11
 2e0:	5d 98       	cbi	0x0b, 5	; 11
 2e2:	5f 9a       	sbi	0x0b, 7	; 11
 2e4:	00 00       	nop
 2e6:	5f 98       	cbi	0x0b, 7	; 11
 2e8:	83 ef       	ldi	r24, 0xF3	; 243
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_Char+0x10>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_Char+0x16>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <LCD_Init>:
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	8a b9       	out	0x0a, r24	; 10
 2fa:	87 b9       	out	0x07, r24	; 7
 2fc:	87 e8       	ldi	r24, 0x87	; 135
 2fe:	93 e1       	ldi	r25, 0x13	; 19
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_Init+0xa>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_Init+0x10>
 306:	00 00       	nop
 308:	88 e3       	ldi	r24, 0x38	; 56
 30a:	db df       	rcall	.-74     	; 0x2c2 <LCD_Command>
 30c:	8c e0       	ldi	r24, 0x0C	; 12
 30e:	d9 df       	rcall	.-78     	; 0x2c2 <LCD_Command>
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	d7 df       	rcall	.-82     	; 0x2c2 <LCD_Command>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	d5 df       	rcall	.-86     	; 0x2c2 <LCD_Command>
 318:	83 ef       	ldi	r24, 0xF3	; 243
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_Init+0x26>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_Init+0x2c>
 322:	00 00       	nop
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	cd cf       	rjmp	.-102    	; 0x2c2 <LCD_Command>
 328:	08 95       	ret

0000032a <LCD_Custom_Char>:
}


void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
	unsigned char i;
	if(loc<8)
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	70 f4       	brcc	.+28     	; 0x352 <LCD_Custom_Char+0x28>
 336:	8b 01       	movw	r16, r22
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 338:	88 0f       	add	r24, r24
 33a:	88 0f       	add	r24, r24
 33c:	88 0f       	add	r24, r24
 33e:	80 5c       	subi	r24, 0xC0	; 192
 340:	c0 df       	rcall	.-128    	; 0x2c2 <LCD_Command>
 342:	e8 01       	movw	r28, r16
 344:	08 5f       	subi	r16, 0xF8	; 248
 346:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_Char(msg[i]);
 348:	89 91       	ld	r24, Y+
 34a:	c8 df       	rcall	.-112    	; 0x2dc <LCD_Char>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 34c:	c0 17       	cp	r28, r16
 34e:	d1 07       	cpc	r29, r17
 350:	d9 f7       	brne	.-10     	; 0x348 <LCD_Custom_Char+0x1e>
		LCD_Char(msg[i]);
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <delay_ms>:
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
    int i,j;
    for(i=0;i<miliSec;i++)
 35c:	18 16       	cp	r1, r24
 35e:	19 06       	cpc	r1, r25
 360:	5c f0       	brlt	.+22     	; 0x378 <delay_ms+0x1c>
 362:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 364:	00 00       	nop
 366:	21 50       	subi	r18, 0x01	; 1
 368:	31 09       	sbc	r19, r1

void delay_ms(int miliSec) //for 8 Mhz crystal
{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 36a:	e1 f7       	brne	.-8      	; 0x364 <delay_ms+0x8>
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
    int i,j;
    for(i=0;i<miliSec;i++)
 36c:	4f 5f       	subi	r20, 0xFF	; 255
 36e:	5f 4f       	sbci	r21, 0xFF	; 255
 370:	84 17       	cp	r24, r20
 372:	95 07       	cpc	r25, r21
 374:	19 f4       	brne	.+6      	; 0x37c <delay_ms+0x20>
 376:	08 95       	ret
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
											// 16x2 LCD: column - 9
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal
{
 37c:	27 e0       	ldi	r18, 0x07	; 7
 37e:	33 e0       	ldi	r19, 0x03	; 3
 380:	f1 cf       	rjmp	.-30     	; 0x364 <delay_ms+0x8>

00000382 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 382:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 384:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 386:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 388:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 38a:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	e5 cf       	rjmp	.-54     	; 0x35c <delay_ms>
 392:	08 95       	ret

00000394 <LCD_ClearScreen>:




void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	f5 cf       	rjmp	.-22     	; 0x382 <LCD_WriteCommand>
 398:	08 95       	ret

0000039a <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 39a:	81 31       	cpi	r24, 0x11	; 17
 39c:	18 f4       	brcc	.+6      	; 0x3a4 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 39e:	81 58       	subi	r24, 0x81	; 129
 3a0:	f0 cf       	rjmp	.-32     	; 0x382 <LCD_WriteCommand>
 3a2:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 3a4:	81 55       	subi	r24, 0x51	; 81
 3a6:	ed cf       	rjmp	.-38     	; 0x382 <LCD_WriteCommand>
 3a8:	08 95       	ret

000003aa <finalTick>:
	}
	return state;
}

enum finaStage{finalwait, finalplayer};// This controls character showing on the screen.
int finalTick(int state){
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
	switch(state){
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	19 f0       	breq	.+6      	; 0x3ba <finalTick+0x10>
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	59 f0       	breq	.+22     	; 0x3ce <finalTick+0x24>
 3b8:	13 c0       	rjmp	.+38     	; 0x3e0 <finalTick+0x36>
		case finalwait:
			if(task1.state == gameRelease){
				state=finalplayer; 
			}
			else{
				state=finalwait;
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <task1>
 3c2:	23 30       	cpi	r18, 0x03	; 3
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <finalTick+0x1e>
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	c9 2f       	mov	r28, r25
 3ca:	d8 2f       	mov	r29, r24
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <finalTick+0x36>
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <task1>
 3d6:	23 30       	cpi	r18, 0x03	; 3
 3d8:	09 f0       	breq	.+2      	; 0x3dc <finalTick+0x32>
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	c9 2f       	mov	r28, r25
 3de:	d8 2f       	mov	r29, r24
			break;
		default:
			break;
	}

	switch (state)
 3e0:	c1 30       	cpi	r28, 0x01	; 1
 3e2:	d1 05       	cpc	r29, r1
 3e4:	39 f4       	brne	.+14     	; 0x3f4 <finalTick+0x4a>
	{
		case finalwait:
			break;
		case finalplayer:
			LCD_Cursor(playCrusor);
 3e6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <playCrusor>
 3ea:	d7 df       	rcall	.-82     	; 0x39a <LCD_Cursor>
			LCD_WriteCommand(0x0C);
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	c9 df       	rcall	.-110    	; 0x382 <LCD_WriteCommand>
			LCD_Char(0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	74 df       	rcall	.-280    	; 0x2dc <LCD_Char>
 3f4:	ce 01       	movw	r24, r28
			break;
		default:
			break;
	}
	return state;
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <LCD_init>:
 3fc:	84 e6       	ldi	r24, 0x64	; 100
   LCD_WriteCommand(0x01);
}

void LCD_init(void) {
    //wait for 100 ms.
	delay_ms(100);
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	ad df       	rcall	.-166    	; 0x35c <delay_ms>
	LCD_WriteCommand(0x38);
 402:	88 e3       	ldi	r24, 0x38	; 56
 404:	be df       	rcall	.-132    	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	bc df       	rcall	.-136    	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 40a:	8f e0       	ldi	r24, 0x0F	; 15
 40c:	ba df       	rcall	.-140    	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	b8 df       	rcall	.-144    	; 0x382 <LCD_WriteCommand>
	delay_ms(10);						 
 412:	8a e0       	ldi	r24, 0x0A	; 10
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	a2 cf       	rjmp	.-188    	; 0x35c <delay_ms>
 418:	08 95       	ret

0000041a <LCD_WriteData>:
 41a:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 41c:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 41e:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 420:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 422:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	99 cf       	rjmp	.-206    	; 0x35c <delay_ms>
 42a:	08 95       	ret

0000042c <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	18 2f       	mov	r17, r24
 436:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 438:	ad df       	rcall	.-166    	; 0x394 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 43a:	88 81       	ld	r24, Y
 43c:	88 23       	and	r24, r24
 43e:	51 f0       	breq	.+20     	; 0x454 <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 440:	01 e0       	ldi	r16, 0x01	; 1
 442:	01 0f       	add	r16, r17
 444:	81 2f       	mov	r24, r17
 446:	a9 df       	rcall	.-174    	; 0x39a <LCD_Cursor>
      LCD_WriteData(*string++);
 448:	89 91       	ld	r24, Y+
 44a:	e7 df       	rcall	.-50     	; 0x41a <LCD_WriteData>
 44c:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 44e:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 450:	81 11       	cpse	r24, r1
 452:	f6 cf       	rjmp	.-20     	; 0x440 <LCD_DisplayString+0x14>
 454:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <gameTick>:
 45e:	0f 93       	push	r16
	}
}

enum gameStage {start, wait, gamePress, gameRelease, win, lose}; //This is the main game function
int gameTick(int state)
{
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	int beforeState = state;
	switch(state)
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	91 05       	cpc	r25, r1
 46c:	c9 f0       	breq	.+50     	; 0x4a0 <gameTick+0x42>
 46e:	34 f4       	brge	.+12     	; 0x47c <gameTick+0x1e>
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	09 f4       	brne	.+2      	; 0x476 <gameTick+0x18>
 474:	6c c0       	rjmp	.+216    	; 0x54e <gameTick+0xf0>
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	51 f0       	breq	.+20     	; 0x48e <gameTick+0x30>
 47a:	5c c0       	rjmp	.+184    	; 0x534 <gameTick+0xd6>
 47c:	84 30       	cpi	r24, 0x04	; 4
 47e:	91 05       	cpc	r25, r1
 480:	09 f4       	brne	.+2      	; 0x484 <gameTick+0x26>
 482:	48 c0       	rjmp	.+144    	; 0x514 <gameTick+0xb6>
 484:	ac f0       	brlt	.+42     	; 0x4b0 <gameTick+0x52>
 486:	05 97       	sbiw	r24, 0x05	; 5
 488:	09 f4       	brne	.+2      	; 0x48c <gameTick+0x2e>
 48a:	4c c0       	rjmp	.+152    	; 0x524 <gameTick+0xc6>
 48c:	53 c0       	rjmp	.+166    	; 0x534 <gameTick+0xd6>
	{
		case start:
			state = wait;
			break;
		case wait:
			if (keyPressed == '#'){
 48e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <keyPressed>
 492:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <keyPressed+0x1>
 496:	83 97       	sbiw	r24, 0x23	; 35
 498:	09 f4       	brne	.+2      	; 0x49c <gameTick+0x3e>
 49a:	c8 c1       	rjmp	.+912    	; 0x82c <gameTick+0x3ce>
 49c:	e8 01       	movw	r28, r16
 49e:	64 c0       	rjmp	.+200    	; 0x568 <gameTick+0x10a>
			else{
				state = wait;
			}
			break;
		case gamePress:
			if (keyPressed != '#'){
 4a0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <keyPressed>
 4a4:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <keyPressed+0x1>
 4a8:	83 97       	sbiw	r24, 0x23	; 35
 4aa:	09 f0       	breq	.+2      	; 0x4ae <gameTick+0x50>
 4ac:	c2 c1       	rjmp	.+900    	; 0x832 <gameTick+0x3d4>
 4ae:	d0 c1       	rjmp	.+928    	; 0x850 <gameTick+0x3f2>
			else{
				state = gamePress;
			}
			break;
		case gameRelease:
			if (keyPressed == '#'){
 4b0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <keyPressed>
 4b4:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <keyPressed+0x1>
 4b8:	83 97       	sbiw	r24, 0x23	; 35
 4ba:	09 f4       	brne	.+2      	; 0x4be <gameTick+0x60>
 4bc:	4b c0       	rjmp	.+150    	; 0x554 <gameTick+0xf6>
				state = wait;
			}
			else{
				if(mapTravel >= 30){
 4be:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
 4c2:	8e 31       	cpi	r24, 0x1E	; 30
 4c4:	08 f0       	brcs	.+2      	; 0x4c8 <gameTick+0x6a>
 4c6:	bf c0       	rjmp	.+382    	; 0x646 <gameTick+0x1e8>
					state = win;
				}
				else{
					for(i=0 ; i<10 ;i++){
						if(playCrusor == 1 && upperMap[i]+1==1){
 4c8:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <playCrusor>
 4cc:	e5 e0       	ldi	r30, 0x05	; 5
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	2f e0       	ldi	r18, 0x0F	; 15
 4d2:	31 e0       	ldi	r19, 0x01	; 1
 4d4:	e8 01       	movw	r28, r16
							state = lose;
 4d6:	55 e0       	ldi	r21, 0x05	; 5
 4d8:	40 e0       	ldi	r20, 0x00	; 0
				if(mapTravel >= 30){
					state = win;
				}
				else{
					for(i=0 ; i<10 ;i++){
						if(playCrusor == 1 && upperMap[i]+1==1){
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	29 f4       	brne	.+10     	; 0x4e8 <gameTick+0x8a>
 4de:	90 81       	ld	r25, Z
 4e0:	91 11       	cpse	r25, r1
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <gameTick+0x8a>
							state = lose;
 4e4:	c5 2f       	mov	r28, r21
 4e6:	d4 2f       	mov	r29, r20
 4e8:	31 96       	adiw	r30, 0x01	; 1
			else{
				if(mapTravel >= 30){
					state = win;
				}
				else{
					for(i=0 ; i<10 ;i++){
 4ea:	2e 17       	cp	r18, r30
 4ec:	3f 07       	cpc	r19, r31
 4ee:	a9 f7       	brne	.-22     	; 0x4da <gameTick+0x7c>
 4f0:	e0 e0       	ldi	r30, 0x00	; 0
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	25 e0       	ldi	r18, 0x05	; 5
 4f6:	31 e0       	ldi	r19, 0x01	; 1
							state = lose;
						}
					}
					for (i =0; i<5;i++){
						if(playCrusor == 17 && lowerMap[i]+17==17){
							state = lose;
 4f8:	45 e0       	ldi	r20, 0x05	; 5
 4fa:	90 e0       	ldi	r25, 0x00	; 0
						if(playCrusor == 1 && upperMap[i]+1==1){
							state = lose;
						}
					}
					for (i =0; i<5;i++){
						if(playCrusor == 17 && lowerMap[i]+17==17){
 4fc:	81 31       	cpi	r24, 0x11	; 17
 4fe:	29 f4       	brne	.+10     	; 0x50a <gameTick+0xac>
 500:	50 81       	ld	r21, Z
 502:	51 11       	cpse	r21, r1
 504:	02 c0       	rjmp	.+4      	; 0x50a <gameTick+0xac>
							state = lose;
 506:	c4 2f       	mov	r28, r20
 508:	d9 2f       	mov	r29, r25
 50a:	31 96       	adiw	r30, 0x01	; 1
					for(i=0 ; i<10 ;i++){
						if(playCrusor == 1 && upperMap[i]+1==1){
							state = lose;
						}
					}
					for (i =0; i<5;i++){
 50c:	e2 17       	cp	r30, r18
 50e:	f3 07       	cpc	r31, r19
 510:	a9 f7       	brne	.-22     	; 0x4fc <gameTick+0x9e>
 512:	92 c1       	rjmp	.+804    	; 0x838 <gameTick+0x3da>
					}
				}
			}
			break;
		case win:
			if(keyPressed == '#'){
 514:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <keyPressed>
 518:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <keyPressed+0x1>
 51c:	83 97       	sbiw	r24, 0x23	; 35
 51e:	09 f0       	breq	.+2      	; 0x522 <gameTick+0xc4>
 520:	97 c1       	rjmp	.+814    	; 0x850 <gameTick+0x3f2>
 522:	1b c0       	rjmp	.+54     	; 0x55a <gameTick+0xfc>
			else{
				state = win;
			}
			break;
		case lose:
			if(keyPressed == '#'){
 524:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <keyPressed>
 528:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <keyPressed+0x1>
 52c:	83 97       	sbiw	r24, 0x23	; 35
 52e:	09 f0       	breq	.+2      	; 0x532 <gameTick+0xd4>
 530:	8f c1       	rjmp	.+798    	; 0x850 <gameTick+0x3f2>
 532:	16 c0       	rjmp	.+44     	; 0x560 <gameTick+0x102>
			}
			break;
		default:
			break;
	}
	switch(state){
 534:	04 30       	cpi	r16, 0x04	; 4
 536:	11 05       	cpc	r17, r1
 538:	09 f4       	brne	.+2      	; 0x53c <gameTick+0xde>
 53a:	81 c0       	rjmp	.+258    	; 0x63e <gameTick+0x1e0>
 53c:	05 30       	cpi	r16, 0x05	; 5
 53e:	11 05       	cpc	r17, r1
 540:	09 f4       	brne	.+2      	; 0x544 <gameTick+0xe6>
 542:	f8 c0       	rjmp	.+496    	; 0x734 <gameTick+0x2d6>
 544:	01 30       	cpi	r16, 0x01	; 1
 546:	11 05       	cpc	r17, r1
 548:	09 f0       	breq	.+2      	; 0x54c <gameTick+0xee>
 54a:	82 c1       	rjmp	.+772    	; 0x850 <gameTick+0x3f2>
 54c:	0c c0       	rjmp	.+24     	; 0x566 <gameTick+0x108>
enum gameStage {start, wait, gamePress, gameRelease, win, lose}; //This is the main game function
int gameTick(int state)
{
	unsigned char i = 0;
	int beforeState = state;
	switch(state)
 54e:	c1 e0       	ldi	r28, 0x01	; 1
 550:	d0 e0       	ldi	r29, 0x00	; 0
 552:	0a c0       	rjmp	.+20     	; 0x568 <gameTick+0x10a>
 554:	c1 e0       	ldi	r28, 0x01	; 1
 556:	d0 e0       	ldi	r29, 0x00	; 0
 558:	07 c0       	rjmp	.+14     	; 0x568 <gameTick+0x10a>
 55a:	c1 e0       	ldi	r28, 0x01	; 1
 55c:	d0 e0       	ldi	r29, 0x00	; 0
 55e:	04 c0       	rjmp	.+8      	; 0x568 <gameTick+0x10a>
 560:	c1 e0       	ldi	r28, 0x01	; 1
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	01 c0       	rjmp	.+2      	; 0x568 <gameTick+0x10a>
			}
			break;
		default:
			break;
	}
	switch(state){
 566:	e8 01       	movw	r28, r16
		case start:
			break;
		case wait:
			playCrusor = 17;
 568:	81 e1       	ldi	r24, 0x11	; 17
 56a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <playCrusor>
			upperMap[0]=2;upperMap[1]=3;upperMap[2]=4;upperMap[3]=8;upperMap[4]=12;upperMap[5]=20;upperMap[6]=25;upperMap[7]=27;upperMap[8]=29;upperMap[9]=30;
 56e:	e5 e0       	ldi	r30, 0x05	; 5
 570:	f1 e0       	ldi	r31, 0x01	; 1
 572:	92 e0       	ldi	r25, 0x02	; 2
 574:	90 83       	st	Z, r25
 576:	93 e0       	ldi	r25, 0x03	; 3
 578:	91 83       	std	Z+1, r25	; 0x01
 57a:	94 e0       	ldi	r25, 0x04	; 4
 57c:	92 83       	std	Z+2, r25	; 0x02
 57e:	98 e0       	ldi	r25, 0x08	; 8
 580:	93 83       	std	Z+3, r25	; 0x03
 582:	9c e0       	ldi	r25, 0x0C	; 12
 584:	94 83       	std	Z+4, r25	; 0x04
 586:	94 e1       	ldi	r25, 0x14	; 20
 588:	95 83       	std	Z+5, r25	; 0x05
 58a:	99 e1       	ldi	r25, 0x19	; 25
 58c:	96 83       	std	Z+6, r25	; 0x06
 58e:	9b e1       	ldi	r25, 0x1B	; 27
 590:	97 83       	std	Z+7, r25	; 0x07
 592:	9d e1       	ldi	r25, 0x1D	; 29
 594:	90 87       	std	Z+8, r25	; 0x08
 596:	9e e1       	ldi	r25, 0x1E	; 30
 598:	91 87       	std	Z+9, r25	; 0x09
			lowerMap[0]=10;lowerMap[1]=15;lowerMap[2]=17;lowerMap[3]=18;lowerMap[4]=22;
 59a:	e0 e0       	ldi	r30, 0x00	; 0
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	9a e0       	ldi	r25, 0x0A	; 10
 5a0:	90 83       	st	Z, r25
 5a2:	9f e0       	ldi	r25, 0x0F	; 15
 5a4:	91 83       	std	Z+1, r25	; 0x01
 5a6:	82 83       	std	Z+2, r24	; 0x02
 5a8:	82 e1       	ldi	r24, 0x12	; 18
 5aa:	83 83       	std	Z+3, r24	; 0x03
 5ac:	86 e1       	ldi	r24, 0x16	; 22
 5ae:	84 83       	std	Z+4, r24	; 0x04
			
			if(beforeState != wait){
 5b0:	01 30       	cpi	r16, 0x01	; 1
 5b2:	11 05       	cpc	r17, r1
 5b4:	41 f0       	breq	.+16     	; 0x5c6 <gameTick+0x168>
				LCD_DisplayString(1, "Press # START!  Use CD to move");
 5b6:	65 e5       	ldi	r22, 0x55	; 85
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	37 df       	rcall	.-402    	; 0x42c <LCD_DisplayString>
				//LCD_Command(0xC0);
				LCD_Char(0);LCD_Char(2);
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	8d de       	rcall	.-742    	; 0x2dc <LCD_Char>
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	8b de       	rcall	.-746    	; 0x2dc <LCD_Char>
				//LCD_Char(2);LCD_Char(4);LCD_Char(5);LCD_Char(4);LCD_Char(5);LCD_Char(4);
				//LCD_Char(5);LCD_Char(4);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);
			}
			//EEPROM USEAGE
	                                                                                                                                                                                                     highest = eeprom_read_byte((uint8_t*)1)+eeprom_read_byte((uint8_t*)10)*10;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	1f d3       	rcall	.+1598   	; 0xc0a <eeprom_read_byte>
 5cc:	18 2f       	mov	r17, r24
 5ce:	8a e0       	ldi	r24, 0x0A	; 10
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	1b d3       	rcall	.+1590   	; 0xc0a <eeprom_read_byte>
 5d4:	88 0f       	add	r24, r24
 5d6:	98 2f       	mov	r25, r24
 5d8:	99 0f       	add	r25, r25
 5da:	99 0f       	add	r25, r25
 5dc:	89 0f       	add	r24, r25
 5de:	18 0f       	add	r17, r24
 5e0:	10 93 e7 01 	sts	0x01E7, r17	; 0x8001e7 <highest>
 5e4:	20 ed       	ldi	r18, 0xD0	; 208
 5e6:	37 e0       	ldi	r19, 0x07	; 7
 5e8:	4d ec       	ldi	r20, 0xCD	; 205
			for(int c = 0; c < 2000;c++){
				PORTB = seg_code[highest%10];
 5ea:	67 ef       	ldi	r22, 0xF7	; 247
				PORTD = ~SegFour;
 5ec:	5b ef       	ldi	r21, 0xFB	; 251
				PORTB = seg_code[highest/10];
				PORTD = ~SegThree;
 5ee:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <highest>
				//LCD_Char(5);LCD_Char(4);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);
			}
			//EEPROM USEAGE
	                                                                                                                                                                                                     highest = eeprom_read_byte((uint8_t*)1)+eeprom_read_byte((uint8_t*)10)*10;
			for(int c = 0; c < 2000;c++){
				PORTB = seg_code[highest%10];
 5f2:	e4 9f       	mul	r30, r20
 5f4:	81 2d       	mov	r24, r1
 5f6:	11 24       	eor	r1, r1
 5f8:	86 95       	lsr	r24
 5fa:	86 95       	lsr	r24
 5fc:	86 95       	lsr	r24
 5fe:	88 0f       	add	r24, r24
 600:	98 2f       	mov	r25, r24
 602:	99 0f       	add	r25, r25
 604:	99 0f       	add	r25, r25
 606:	89 0f       	add	r24, r25
 608:	e8 1b       	sub	r30, r24
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	e1 5f       	subi	r30, 0xF1	; 241
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	80 81       	ld	r24, Z
 612:	85 b9       	out	0x05, r24	; 5
 614:	6b b9       	out	0x0b, r22	; 11
				PORTD = ~SegFour;
 616:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <highest>
				PORTB = seg_code[highest/10];
 61a:	e4 9f       	mul	r30, r20
 61c:	e1 2d       	mov	r30, r1
 61e:	11 24       	eor	r1, r1
 620:	e6 95       	lsr	r30
 622:	e6 95       	lsr	r30
 624:	e6 95       	lsr	r30
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e1 5f       	subi	r30, 0xF1	; 241
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 62c:	80 81       	ld	r24, Z
 62e:	85 b9       	out	0x05, r24	; 5
 630:	5b b9       	out	0x0b, r21	; 11
				PORTD = ~SegThree;
 632:	21 50       	subi	r18, 0x01	; 1
 634:	31 09       	sbc	r19, r1
 636:	d9 f6       	brne	.-74     	; 0x5ee <gameTick+0x190>
				//LCD_Char(2);LCD_Char(4);LCD_Char(5);LCD_Char(4);LCD_Char(5);LCD_Char(4);
				//LCD_Char(5);LCD_Char(4);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);LCD_Char(7);
			}
			//EEPROM USEAGE
	                                                                                                                                                                                                     highest = eeprom_read_byte((uint8_t*)1)+eeprom_read_byte((uint8_t*)10)*10;
			for(int c = 0; c < 2000;c++){
 638:	15 b8       	out	0x05, r1	; 5
				PORTD = ~SegFour;
				PORTB = seg_code[highest/10];
				PORTD = ~SegThree;

			}
			PORTB = 0;
 63a:	8e 01       	movw	r16, r28

			break;
 63c:	09 c1       	rjmp	.+530    	; 0x850 <gameTick+0x3f2>
 63e:	04 30       	cpi	r16, 0x04	; 4
			break;
		case gameRelease:
			break;

		case win:
			if(beforeState != win){
 640:	11 05       	cpc	r17, r1
 642:	29 f4       	brne	.+10     	; 0x64e <gameTick+0x1f0>
 644:	05 c1       	rjmp	.+522    	; 0x850 <gameTick+0x3f2>
 646:	04 e0       	ldi	r16, 0x04	; 4
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	01 c0       	rjmp	.+2      	; 0x64e <gameTick+0x1f0>
			}
			break;
		default:
			break;
	}
	switch(state){
 64c:	8e 01       	movw	r16, r28
		case gameRelease:
			break;

		case win:
			if(beforeState != win){
				LCD_DisplayString(1, "YOU WIN!        Your score is:");
 64e:	64 e7       	ldi	r22, 0x74	; 116
 650:	71 e0       	ldi	r23, 0x01	; 1
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	eb de       	rcall	.-554    	; 0x42c <LCD_DisplayString>
				LCD_Cursor(31);
 656:	8f e1       	ldi	r24, 0x1F	; 31
 658:	a0 de       	rcall	.-704    	; 0x39a <LCD_Cursor>
 65a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
				LCD_WriteData(mapTravel/10+'0');
 65e:	cd ec       	ldi	r28, 0xCD	; 205
 660:	8c 9f       	mul	r24, r28
 662:	81 2d       	mov	r24, r1
 664:	11 24       	eor	r1, r1
 666:	86 95       	lsr	r24
 668:	86 95       	lsr	r24
 66a:	86 95       	lsr	r24
 66c:	80 5d       	subi	r24, 0xD0	; 208
 66e:	d5 de       	rcall	.-598    	; 0x41a <LCD_WriteData>
				LCD_Cursor(32);
 670:	80 e2       	ldi	r24, 0x20	; 32
 672:	93 de       	rcall	.-730    	; 0x39a <LCD_Cursor>
 674:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
				LCD_WriteData(mapTravel%10+'0');
 678:	8c 9f       	mul	r24, r28
 67a:	91 2d       	mov	r25, r1
 67c:	11 24       	eor	r1, r1
 67e:	96 95       	lsr	r25
 680:	96 95       	lsr	r25
 682:	96 95       	lsr	r25
 684:	99 0f       	add	r25, r25
 686:	29 2f       	mov	r18, r25
 688:	22 0f       	add	r18, r18
 68a:	22 0f       	add	r18, r18
 68c:	92 0f       	add	r25, r18
 68e:	89 1b       	sub	r24, r25
 690:	80 5d       	subi	r24, 0xD0	; 208
 692:	c3 de       	rcall	.-634    	; 0x41a <LCD_WriteData>
 694:	20 e2       	ldi	r18, 0x20	; 32
 696:	3e e4       	ldi	r19, 0x4E	; 78
 698:	4d ec       	ldi	r20, 0xCD	; 205
				//Seven Segment Display
				for(int p = 0 ; p <20000; p++){
					PORTB = seg_code[mapTravel/10];
 69a:	6b ef       	ldi	r22, 0xFB	; 251
					PORTD = ~SegThree;
 69c:	57 ef       	ldi	r21, 0xF7	; 247
					PORTB = seg_code[mapTravel%10];
					PORTD = ~SegFour;
 69e:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <__data_end>
				LCD_WriteData(mapTravel/10+'0');
				LCD_Cursor(32);
				LCD_WriteData(mapTravel%10+'0');
				//Seven Segment Display
				for(int p = 0 ; p <20000; p++){
					PORTB = seg_code[mapTravel/10];
 6a2:	e4 9f       	mul	r30, r20
 6a4:	e1 2d       	mov	r30, r1
 6a6:	11 24       	eor	r1, r1
 6a8:	e6 95       	lsr	r30
 6aa:	e6 95       	lsr	r30
 6ac:	e6 95       	lsr	r30
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	e1 5f       	subi	r30, 0xF1	; 241
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	80 81       	ld	r24, Z
 6b6:	85 b9       	out	0x05, r24	; 5
 6b8:	6b b9       	out	0x0b, r22	; 11
					PORTD = ~SegThree;
 6ba:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <__data_end>
					PORTB = seg_code[mapTravel%10];
 6be:	e4 9f       	mul	r30, r20
 6c0:	81 2d       	mov	r24, r1
 6c2:	11 24       	eor	r1, r1
 6c4:	86 95       	lsr	r24
 6c6:	86 95       	lsr	r24
 6c8:	86 95       	lsr	r24
 6ca:	88 0f       	add	r24, r24
 6cc:	98 2f       	mov	r25, r24
 6ce:	99 0f       	add	r25, r25
 6d0:	99 0f       	add	r25, r25
 6d2:	89 0f       	add	r24, r25
 6d4:	e8 1b       	sub	r30, r24
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	e1 5f       	subi	r30, 0xF1	; 241
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	80 81       	ld	r24, Z
 6de:	85 b9       	out	0x05, r24	; 5
 6e0:	5b b9       	out	0x0b, r21	; 11
					PORTD = ~SegFour;
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	31 09       	sbc	r19, r1
 6e6:	d9 f6       	brne	.-74     	; 0x69e <gameTick+0x240>
				LCD_Cursor(31);
				LCD_WriteData(mapTravel/10+'0');
				LCD_Cursor(32);
				LCD_WriteData(mapTravel%10+'0');
				//Seven Segment Display
				for(int p = 0 ; p <20000; p++){
 6e8:	15 b8       	out	0x05, r1	; 5
					PORTB = seg_code[mapTravel/10];
					PORTD = ~SegThree;
					PORTB = seg_code[mapTravel%10];
					PORTD = ~SegFour;
				}
				PORTB = 0;
 6ea:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
				//EEPROM WRITE
				if(mapTravel > highest)
 6ee:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <highest>
 6f2:	98 17       	cp	r25, r24
 6f4:	08 f0       	brcs	.+2      	; 0x6f8 <gameTick+0x29a>
 6f6:	ac c0       	rjmp	.+344    	; 0x850 <gameTick+0x3f2>
 6f8:	cd ec       	ldi	r28, 0xCD	; 205
				{
					eeprom_write_byte((uint8_t*)10,mapTravel/10);
 6fa:	8c 9f       	mul	r24, r28
 6fc:	81 2d       	mov	r24, r1
 6fe:	11 24       	eor	r1, r1
 700:	68 2f       	mov	r22, r24
 702:	66 95       	lsr	r22
 704:	66 95       	lsr	r22
 706:	66 95       	lsr	r22
 708:	8a e0       	ldi	r24, 0x0A	; 10
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	86 d2       	rcall	.+1292   	; 0xc1a <eeprom_write_byte>
 70e:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <__data_end>
					eeprom_write_byte((uint8_t*)1,mapTravel%10);
 712:	9c 9f       	mul	r25, r28
 714:	81 2d       	mov	r24, r1
 716:	11 24       	eor	r1, r1
 718:	86 95       	lsr	r24
 71a:	86 95       	lsr	r24
 71c:	86 95       	lsr	r24
 71e:	88 0f       	add	r24, r24
 720:	28 2f       	mov	r18, r24
 722:	22 0f       	add	r18, r18
 724:	22 0f       	add	r18, r18
 726:	82 0f       	add	r24, r18
 728:	69 2f       	mov	r22, r25
 72a:	68 1b       	sub	r22, r24
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	74 d2       	rcall	.+1256   	; 0xc1a <eeprom_write_byte>
 732:	8e c0       	rjmp	.+284    	; 0x850 <gameTick+0x3f2>
			}
			break;
		default:
			break;
	}
	switch(state){
 734:	e8 01       	movw	r28, r16
				 //  write the byte 64 to location 1 of the EEPROM 
			}
			break;

		case lose:
			if(beforeState != lose){
 736:	05 30       	cpi	r16, 0x05	; 5
 738:	11 05       	cpc	r17, r1
 73a:	09 f4       	brne	.+2      	; 0x73e <gameTick+0x2e0>
 73c:	71 c0       	rjmp	.+226    	; 0x820 <gameTick+0x3c2>
				LCD_DisplayString(1, "GAME OVER!      Your score is:");
 73e:	63 e9       	ldi	r22, 0x93	; 147
 740:	71 e0       	ldi	r23, 0x01	; 1
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	73 de       	rcall	.-794    	; 0x42c <LCD_DisplayString>
				LCD_Cursor(31);
 746:	8f e1       	ldi	r24, 0x1F	; 31
 748:	28 de       	rcall	.-944    	; 0x39a <LCD_Cursor>
				LCD_WriteData(mapTravel/10+'0');
 74a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
 74e:	1d ec       	ldi	r17, 0xCD	; 205
 750:	81 9f       	mul	r24, r17
 752:	81 2d       	mov	r24, r1
 754:	11 24       	eor	r1, r1
 756:	86 95       	lsr	r24
 758:	86 95       	lsr	r24
 75a:	86 95       	lsr	r24
 75c:	80 5d       	subi	r24, 0xD0	; 208
 75e:	5d de       	rcall	.-838    	; 0x41a <LCD_WriteData>
 760:	80 e2       	ldi	r24, 0x20	; 32
				LCD_Cursor(32);
 762:	1b de       	rcall	.-970    	; 0x39a <LCD_Cursor>
 764:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
				LCD_WriteData(mapTravel%10+'0');
 768:	81 9f       	mul	r24, r17
 76a:	91 2d       	mov	r25, r1
 76c:	11 24       	eor	r1, r1
 76e:	96 95       	lsr	r25
 770:	96 95       	lsr	r25
 772:	96 95       	lsr	r25
 774:	99 0f       	add	r25, r25
 776:	29 2f       	mov	r18, r25
 778:	22 0f       	add	r18, r18
 77a:	22 0f       	add	r18, r18
 77c:	92 0f       	add	r25, r18
 77e:	89 1b       	sub	r24, r25
 780:	80 5d       	subi	r24, 0xD0	; 208
 782:	4b de       	rcall	.-874    	; 0x41a <LCD_WriteData>
 784:	20 e2       	ldi	r18, 0x20	; 32
 786:	3e e4       	ldi	r19, 0x4E	; 78
 788:	4d ec       	ldi	r20, 0xCD	; 205
 78a:	6b ef       	ldi	r22, 0xFB	; 251
				for(int q = 0 ; q <20000; q++){
					PORTB = seg_code[mapTravel/10];
 78c:	57 ef       	ldi	r21, 0xF7	; 247
					PORTD = ~SegThree;
 78e:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <__data_end>
				LCD_Cursor(31);
				LCD_WriteData(mapTravel/10+'0');
				LCD_Cursor(32);
				LCD_WriteData(mapTravel%10+'0');
				for(int q = 0 ; q <20000; q++){
					PORTB = seg_code[mapTravel/10];
 792:	e4 9f       	mul	r30, r20
 794:	e1 2d       	mov	r30, r1
 796:	11 24       	eor	r1, r1
 798:	e6 95       	lsr	r30
 79a:	e6 95       	lsr	r30
 79c:	e6 95       	lsr	r30
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	e1 5f       	subi	r30, 0xF1	; 241
 7a2:	fe 4f       	sbci	r31, 0xFE	; 254
 7a4:	80 81       	ld	r24, Z
 7a6:	85 b9       	out	0x05, r24	; 5
 7a8:	6b b9       	out	0x0b, r22	; 11
 7aa:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <__data_end>
					PORTD = ~SegThree;
					PORTB = seg_code[mapTravel%10];
 7ae:	e4 9f       	mul	r30, r20
 7b0:	81 2d       	mov	r24, r1
 7b2:	11 24       	eor	r1, r1
 7b4:	86 95       	lsr	r24
 7b6:	86 95       	lsr	r24
 7b8:	86 95       	lsr	r24
 7ba:	88 0f       	add	r24, r24
 7bc:	98 2f       	mov	r25, r24
 7be:	99 0f       	add	r25, r25
 7c0:	99 0f       	add	r25, r25
 7c2:	89 0f       	add	r24, r25
 7c4:	e8 1b       	sub	r30, r24
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	e1 5f       	subi	r30, 0xF1	; 241
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	80 81       	ld	r24, Z
 7ce:	85 b9       	out	0x05, r24	; 5
 7d0:	5b b9       	out	0x0b, r21	; 11
 7d2:	21 50       	subi	r18, 0x01	; 1
					PORTD = ~SegFour;
 7d4:	31 09       	sbc	r19, r1
 7d6:	d9 f6       	brne	.-74     	; 0x78e <gameTick+0x330>
 7d8:	15 b8       	out	0x05, r1	; 5
				}
				PORTB = 0;
 7da:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
				if(mapTravel > highest)
 7de:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <highest>
 7e2:	98 17       	cp	r25, r24
 7e4:	f8 f4       	brcc	.+62     	; 0x824 <gameTick+0x3c6>
 7e6:	1d ec       	ldi	r17, 0xCD	; 205
				{
					eeprom_write_byte((uint8_t*)10,mapTravel/10);
 7e8:	81 9f       	mul	r24, r17
 7ea:	61 2d       	mov	r22, r1
 7ec:	11 24       	eor	r1, r1
 7ee:	66 95       	lsr	r22
 7f0:	66 95       	lsr	r22
 7f2:	66 95       	lsr	r22
 7f4:	8a e0       	ldi	r24, 0x0A	; 10
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	10 d2       	rcall	.+1056   	; 0xc1a <eeprom_write_byte>
 7fa:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <__data_end>
					eeprom_write_byte((uint8_t*)1,mapTravel%10);
 7fe:	61 9f       	mul	r22, r17
 800:	81 2d       	mov	r24, r1
 802:	11 24       	eor	r1, r1
 804:	86 95       	lsr	r24
 806:	86 95       	lsr	r24
 808:	86 95       	lsr	r24
 80a:	88 0f       	add	r24, r24
 80c:	98 2f       	mov	r25, r24
 80e:	99 0f       	add	r25, r25
 810:	99 0f       	add	r25, r25
 812:	89 0f       	add	r24, r25
 814:	68 1b       	sub	r22, r24
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	ff d1       	rcall	.+1022   	; 0xc1a <eeprom_write_byte>
 81c:	8e 01       	movw	r16, r28
 81e:	18 c0       	rjmp	.+48     	; 0x850 <gameTick+0x3f2>
 820:	8e 01       	movw	r16, r28
 822:	16 c0       	rjmp	.+44     	; 0x850 <gameTick+0x3f2>
 824:	8e 01       	movw	r16, r28
 826:	14 c0       	rjmp	.+40     	; 0x850 <gameTick+0x3f2>
 828:	8e 01       	movw	r16, r28
 82a:	12 c0       	rjmp	.+36     	; 0x850 <gameTick+0x3f2>
			}
			break;
		default:
			break;
	}
	switch(state){
 82c:	02 e0       	ldi	r16, 0x02	; 2
 82e:	10 e0       	ldi	r17, 0x00	; 0
		case start:
			state = wait;
			break;
		case wait:
			if (keyPressed == '#'){
				state = gamePress;
 830:	0f c0       	rjmp	.+30     	; 0x850 <gameTick+0x3f2>
 832:	03 e0       	ldi	r16, 0x03	; 3
 834:	10 e0       	ldi	r17, 0x00	; 0
				state = wait;
			}
			break;
		case gamePress:
			if (keyPressed != '#'){
				state = gameRelease;
 836:	0c c0       	rjmp	.+24     	; 0x850 <gameTick+0x3f2>
 838:	c4 30       	cpi	r28, 0x04	; 4
			}
			break;
		default:
			break;
	}
	return state;
 83a:	d1 05       	cpc	r29, r1
			}
			break;
		default:
			break;
	}
	switch(state){
 83c:	09 f4       	brne	.+2      	; 0x840 <gameTick+0x3e2>
 83e:	06 cf       	rjmp	.-500    	; 0x64c <gameTick+0x1ee>
 840:	c5 30       	cpi	r28, 0x05	; 5
 842:	d1 05       	cpc	r29, r1
 844:	09 f4       	brne	.+2      	; 0x848 <gameTick+0x3ea>
 846:	77 cf       	rjmp	.-274    	; 0x736 <gameTick+0x2d8>
 848:	c1 30       	cpi	r28, 0x01	; 1
 84a:	d1 05       	cpc	r29, r1
 84c:	69 f7       	brne	.-38     	; 0x828 <gameTick+0x3ca>
 84e:	8c ce       	rjmp	.-744    	; 0x568 <gameTick+0x10a>
 850:	c8 01       	movw	r24, r16
 852:	df 91       	pop	r29
			break;
		default:
			break;
	}
	return state;
}
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	08 95       	ret

0000085c <customLCD>:
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
		 }
	 }
*/

void customLCD()//custom character
{
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	e0 97       	sbiw	r28, 0x30	; 48
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	f8 94       	cli
 86a:	de bf       	out	0x3e, r29	; 62
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	cd bf       	out	0x3d, r28	; 61
	char i;
	//Custom character dictionary
	unsigned char Character1[8] = { 4, 10, 5, 31, 20, 6, 10, 18 };  //the character icon
 870:	88 e0       	ldi	r24, 0x08	; 8
 872:	e5 e2       	ldi	r30, 0x25	; 37
 874:	f1 e0       	ldi	r31, 0x01	; 1
 876:	de 01       	movw	r26, r28
 878:	11 96       	adiw	r26, 0x01	; 1
 87a:	01 90       	ld	r0, Z+
 87c:	0d 92       	st	X+, r0
 87e:	8a 95       	dec	r24
 880:	e1 f7       	brne	.-8      	; 0x87a <customLCD+0x1e>
	unsigned char Character2[8] = { 31, 31, 31, 31, 31, 31, 31, 31 }; //the block icon
 882:	88 e0       	ldi	r24, 0x08	; 8
 884:	ed e2       	ldi	r30, 0x2D	; 45
 886:	f1 e0       	ldi	r31, 0x01	; 1
 888:	de 01       	movw	r26, r28
 88a:	19 96       	adiw	r26, 0x09	; 9
 88c:	01 90       	ld	r0, Z+
 88e:	0d 92       	st	X+, r0
 890:	8a 95       	dec	r24
 892:	e1 f7       	brne	.-8      	; 0x88c <customLCD+0x30>
	unsigned char Character3[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; //undefined
	unsigned char Character4[8] = { 0x01, 0x03, 0x07, 0x1F, 0x1F, 0x07, 0x03, 0x01 }; //undefined
	unsigned char Character5[8] = { 4, 4, 14, 21, 31, 14, 10, 21}; //the boss icon
 894:	88 e0       	ldi	r24, 0x08	; 8
 896:	e5 e3       	ldi	r30, 0x35	; 53
 898:	f1 e0       	ldi	r31, 0x01	; 1
 89a:	de 01       	movw	r26, r28
 89c:	51 96       	adiw	r26, 0x11	; 17
 89e:	01 90       	ld	r0, Z+
 8a0:	0d 92       	st	X+, r0
 8a2:	8a 95       	dec	r24
 8a4:	e1 f7       	brne	.-8      	; 0x89e <customLCD+0x42>
	unsigned char Character6[8] = { 31, 21, 21, 31, 17, 21, 31,0 }; // the monster icon 
 8a6:	88 e0       	ldi	r24, 0x08	; 8
 8a8:	ed e3       	ldi	r30, 0x3D	; 61
 8aa:	f1 e0       	ldi	r31, 0x01	; 1
 8ac:	de 01       	movw	r26, r28
 8ae:	59 96       	adiw	r26, 0x19	; 25
 8b0:	01 90       	ld	r0, Z+
 8b2:	0d 92       	st	X+, r0
 8b4:	8a 95       	dec	r24
 8b6:	e1 f7       	brne	.-8      	; 0x8b0 <customLCD+0x54>
	unsigned char Character7[8] = { 0, 0, 10, 0, 4, 17, 14, 0 }; // the smile icon
 8b8:	88 e0       	ldi	r24, 0x08	; 8
 8ba:	e5 e4       	ldi	r30, 0x45	; 69
 8bc:	f1 e0       	ldi	r31, 0x01	; 1
 8be:	de 01       	movw	r26, r28
 8c0:	91 96       	adiw	r26, 0x21	; 33
 8c2:	01 90       	ld	r0, Z+
 8c4:	0d 92       	st	X+, r0
 8c6:	8a 95       	dec	r24
 8c8:	e1 f7       	brne	.-8      	; 0x8c2 <customLCD+0x66>
	unsigned char Character8[8] = { 0, 10, 31, 31, 14, 4, 0, 0 }; // the heart icon
 8ca:	88 e0       	ldi	r24, 0x08	; 8
 8cc:	ed e4       	ldi	r30, 0x4D	; 77
 8ce:	f1 e0       	ldi	r31, 0x01	; 1
 8d0:	de 01       	movw	r26, r28
 8d2:	99 96       	adiw	r26, 0x29	; 41
 8d4:	01 90       	ld	r0, Z+
 8d6:	0d 92       	st	X+, r0
 8d8:	8a 95       	dec	r24
 8da:	e1 f7       	brne	.-8      	; 0x8d4 <customLCD+0x78>

	LCD_Init();
 8dc:	0c dd       	rcall	.-1512   	; 0x2f6 <LCD_Init>
	
	LCD_Custom_Char(0, Character1);  /* Build Character1 at position 0 */
 8de:	be 01       	movw	r22, r28
 8e0:	6f 5f       	subi	r22, 0xFF	; 255
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	21 dd       	rcall	.-1470   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
 8e8:	be 01       	movw	r22, r28
 8ea:	67 5f       	subi	r22, 0xF7	; 247
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	1c dd       	rcall	.-1480   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(2, Character2);  /* Build Character3 at position 2 */ //changed to undefined 
 8f2:	be 01       	movw	r22, r28
 8f4:	67 5f       	subi	r22, 0xF7	; 247
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	17 dd       	rcall	.-1490   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(3, Character2);  /* Build Character4 at position 3 */ //changed to undefined
 8fc:	be 01       	movw	r22, r28
 8fe:	67 5f       	subi	r22, 0xF7	; 247
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	12 dd       	rcall	.-1500   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(4, Character5);  /* Build Character5 at position 4 */
 906:	be 01       	movw	r22, r28
 908:	6f 5e       	subi	r22, 0xEF	; 239
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	84 e0       	ldi	r24, 0x04	; 4
 90e:	0d dd       	rcall	.-1510   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(5, Character6);  /* Build Character6 at position 5 */
 910:	be 01       	movw	r22, r28
 912:	67 5e       	subi	r22, 0xE7	; 231
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	85 e0       	ldi	r24, 0x05	; 5
 918:	08 dd       	rcall	.-1520   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(6, Character7);  /* Build Character6 at position 6 */
 91a:	be 01       	movw	r22, r28
 91c:	6f 5d       	subi	r22, 0xDF	; 223
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	86 e0       	ldi	r24, 0x06	; 6
 922:	03 dd       	rcall	.-1530   	; 0x32a <LCD_Custom_Char>
	LCD_Custom_Char(7, Character8);  /* Build Character6 at position 7 */
 924:	be 01       	movw	r22, r28
 926:	67 5d       	subi	r22, 0xD7	; 215
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	87 e0       	ldi	r24, 0x07	; 7
 92c:	fe dc       	rcall	.-1540   	; 0x32a <LCD_Custom_Char>
 92e:	e0 96       	adiw	r28, 0x30	; 48
}
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	f8 94       	cli
 934:	de bf       	out	0x3e, r29	; 62
 936:	0f be       	out	0x3f, r0	; 63
 938:	cd bf       	out	0x3d, r28	; 61
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	08 95       	ret

00000940 <at>:
 940:	81 30       	cpi	r24, 0x01	; 1

void at( char x,  char y)
{
	if(x == 1){
 942:	29 f4       	brne	.+10     	; 0x94e <at+0xe>
		if(y < 17){
 944:	61 31       	cpi	r22, 0x11	; 17
 946:	50 f4       	brcc	.+20     	; 0x95c <at+0x1c>
			LCD_Cursor(y+1);
 948:	86 0f       	add	r24, r22
 94a:	27 cd       	rjmp	.-1458   	; 0x39a <LCD_Cursor>
 94c:	08 95       	ret
		}
	}
    if(x == 2){
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	29 f4       	brne	.+10     	; 0x95c <at+0x1c>
		if(y < 17){
 952:	61 31       	cpi	r22, 0x11	; 17
 954:	18 f4       	brcc	.+6      	; 0x95c <at+0x1c>
			LCD_Cursor(y+17);
 956:	81 e1       	ldi	r24, 0x11	; 17
 958:	86 0f       	add	r24, r22
 95a:	1f cd       	rjmp	.-1474   	; 0x39a <LCD_Cursor>
 95c:	08 95       	ret

0000095e <mapTick>:
	}
	return state;
}

enum mapStage {mapwait,mapmove}; //This controls character moves.
int mapTick(int state){
 95e:	cf 92       	push	r12
 960:	df 92       	push	r13
 962:	ef 92       	push	r14
 964:	ff 92       	push	r15
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
	unsigned char i = 0;
	switch(state){
 96c:	00 97       	sbiw	r24, 0x00	; 0
 96e:	21 f0       	breq	.+8      	; 0x978 <mapTick+0x1a>
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	91 05       	cpc	r25, r1
 974:	31 f0       	breq	.+12     	; 0x982 <mapTick+0x24>
 976:	0a c0       	rjmp	.+20     	; 0x98c <mapTick+0x2e>
		case mapwait:
			if(task1.state == gameRelease){
 978:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <task1>
 97c:	83 30       	cpi	r24, 0x03	; 3
 97e:	69 f4       	brne	.+26     	; 0x99a <mapTick+0x3c>
 980:	11 c0       	rjmp	.+34     	; 0x9a4 <mapTick+0x46>
			else if (task1.state != gameRelease){
				state = mapwait;
			}
		break;
			case mapmove:
			if(task1.state == gameRelease){
 982:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <task1>
 986:	83 30       	cpi	r24, 0x03	; 3
 988:	41 f4       	brne	.+16     	; 0x99a <mapTick+0x3c>
 98a:	0c c0       	rjmp	.+24     	; 0x9a4 <mapTick+0x46>
			}
			break;
		default:
			break;
	}		
	switch(state){
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	29 f0       	breq	.+10     	; 0x99a <mapTick+0x3c>
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	91 05       	cpc	r25, r1
 994:	09 f0       	breq	.+2      	; 0x998 <mapTick+0x3a>
 996:	50 c0       	rjmp	.+160    	; 0xa38 <mapTick+0xda>
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <mapTick+0x46>
		case mapwait:
			mapTravel = 0;
 99a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <__data_end>
			break;
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	4a c0       	rjmp	.+148    	; 0xa38 <mapTick+0xda>
		case mapmove:
			LCD_ClearScreen();
 9a4:	f7 dc       	rcall	.-1554   	; 0x394 <LCD_ClearScreen>
 9a6:	05 e0       	ldi	r16, 0x05	; 5
 9a8:	11 e0       	ldi	r17, 0x01	; 1
 9aa:	2f e0       	ldi	r18, 0x0F	; 15
 9ac:	31 e0       	ldi	r19, 0x01	; 1
 9ae:	f8 01       	movw	r30, r16
			for(i = 0; i < 10; i++){
				upperMap[i]--;
 9b0:	80 81       	ld	r24, Z
 9b2:	81 50       	subi	r24, 0x01	; 1
 9b4:	81 93       	st	Z+, r24
		case mapwait:
			mapTravel = 0;
			break;
		case mapmove:
			LCD_ClearScreen();
			for(i = 0; i < 10; i++){
 9b6:	e2 17       	cp	r30, r18
 9b8:	f3 07       	cpc	r31, r19
 9ba:	d1 f7       	brne	.-12     	; 0x9b0 <mapTick+0x52>
 9bc:	0f 2e       	mov	r0, r31
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	cf 2e       	mov	r12, r31
 9c2:	f1 e0       	ldi	r31, 0x01	; 1
 9c4:	df 2e       	mov	r13, r31
 9c6:	f0 2d       	mov	r31, r0
 9c8:	0f 2e       	mov	r0, r31
 9ca:	f5 e0       	ldi	r31, 0x05	; 5
 9cc:	ef 2e       	mov	r14, r31
 9ce:	f1 e0       	ldi	r31, 0x01	; 1
 9d0:	ff 2e       	mov	r15, r31
 9d2:	f0 2d       	mov	r31, r0
 9d4:	f6 01       	movw	r30, r12
				upperMap[i]--;
			}
			for(i = 0; i < 5; i++){
				lowerMap[i]--;
 9d6:	80 81       	ld	r24, Z
 9d8:	81 50       	subi	r24, 0x01	; 1
 9da:	81 93       	st	Z+, r24
		case mapmove:
			LCD_ClearScreen();
			for(i = 0; i < 10; i++){
				upperMap[i]--;
			}
			for(i = 0; i < 5; i++){
 9dc:	ee 15       	cp	r30, r14
 9de:	ff 05       	cpc	r31, r15
 9e0:	d1 f7       	brne	.-12     	; 0x9d6 <mapTick+0x78>
				lowerMap[i]--;
			}

			mapTravel++; 
 9e2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__data_end>
 9e6:	8f 5f       	subi	r24, 0xFF	; 255
 9e8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <__data_end>

			for(i=0;i<10;i++){
 9ec:	c0 e0       	ldi	r28, 0x00	; 0
				if(upperMap[i] <= 16){
 9ee:	f8 01       	movw	r30, r16
 9f0:	61 91       	ld	r22, Z+
 9f2:	8f 01       	movw	r16, r30
 9f4:	61 31       	cpi	r22, 0x11	; 17
 9f6:	78 f4       	brcc	.+30     	; 0xa16 <mapTick+0xb8>
					at(1, upperMap[i]);
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	a2 df       	rcall	.-188    	; 0x940 <at>
					LCD_Char(4);
 9fc:	84 e0       	ldi	r24, 0x04	; 4
 9fe:	6e dc       	rcall	.-1828   	; 0x2dc <LCD_Char>
 a00:	c9 30       	cpi	r28, 0x09	; 9
					if(i == 9){
 a02:	49 f4       	brne	.+18     	; 0xa16 <mapTick+0xb8>
						LCD_Char(7);
 a04:	87 e0       	ldi	r24, 0x07	; 7
 a06:	6a dc       	rcall	.-1836   	; 0x2dc <LCD_Char>
						LCD_Char(7);
 a08:	87 e0       	ldi	r24, 0x07	; 7
 a0a:	68 dc       	rcall	.-1840   	; 0x2dc <LCD_Char>
						LCD_Char(7);
 a0c:	87 e0       	ldi	r24, 0x07	; 7
 a0e:	66 dc       	rcall	.-1844   	; 0x2dc <LCD_Char>
 a10:	87 e0       	ldi	r24, 0x07	; 7
						LCD_Char(7);
 a12:	64 dc       	rcall	.-1848   	; 0x2dc <LCD_Char>
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <mapTick+0xbe>
 a16:	cf 5f       	subi	r28, 0xFF	; 255
 a18:	ca 30       	cpi	r28, 0x0A	; 10
				lowerMap[i]--;
			}

			mapTravel++; 

			for(i=0;i<10;i++){
 a1a:	49 f7       	brne	.-46     	; 0x9ee <mapTick+0x90>
 a1c:	f6 01       	movw	r30, r12
					}
				}
			}
					
			for(i=0; i <5;i++){
				if(lowerMap[i] <=16){
 a1e:	61 91       	ld	r22, Z+
 a20:	6f 01       	movw	r12, r30
 a22:	61 31       	cpi	r22, 0x11	; 17
 a24:	20 f4       	brcc	.+8      	; 0xa2e <mapTick+0xd0>
					at(2, lowerMap[i]);
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	8b df       	rcall	.-234    	; 0x940 <at>
 a2a:	84 e0       	ldi	r24, 0x04	; 4
					LCD_Char(4);
 a2c:	57 dc       	rcall	.-1874   	; 0x2dc <LCD_Char>
 a2e:	ce 14       	cp	r12, r14
 a30:	df 04       	cpc	r13, r15
						LCD_Char(7);
					}
				}
			}
					
			for(i=0; i <5;i++){
 a32:	a1 f7       	brne	.-24     	; 0xa1c <mapTick+0xbe>
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	cf 91       	pop	r28
 a3a:	1f 91       	pop	r17
			break;
		default:
			break;
	}
	return state;
}
 a3c:	0f 91       	pop	r16
 a3e:	ff 90       	pop	r15
 a40:	ef 90       	pop	r14
 a42:	df 90       	pop	r13
 a44:	cf 90       	pop	r12
 a46:	08 95       	ret

00000a48 <main>:
 a48:	80 ef       	ldi	r24, 0xF0	; 240
 a4a:	81 b9       	out	0x01, r24	; 1
};
*/

int main() {
	/* Configure the ports as output */
	DDRA = 0xF0; PORTA = 0x0F; // KeyPad Entry
 a4c:	8f e0       	ldi	r24, 0x0F	; 15
 a4e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // 7 Segment Matrix
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	84 b9       	out	0x04, r24	; 4
 a54:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD Screen Control 
 a56:	87 b9       	out	0x07, r24	; 7
 a58:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD Control Signal for PD5,6,7. Also, 7 Segment Matrix digit control. Maybe Data Output?	
 a5a:	8a b9       	out	0x0a, r24	; 10
 a5c:	1b b8       	out	0x0b, r1	; 11
	
	customLCD(); // This is the Welcome screen.
 a5e:	fe de       	rcall	.-516    	; 0x85c <customLCD>
	LCD_init();
 a60:	cd dc       	rcall	.-1638   	; 0x3fc <LCD_init>
	LCD_ClearScreen();
 a62:	98 dc       	rcall	.-1744   	; 0x394 <LCD_ClearScreen>
 a64:	e7 ed       	ldi	r30, 0xD7	; 215
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	/*
	Task doing state
	*/
	task1.state =  start;
 a66:	f1 e0       	ldi	r31, 0x01	; 1
 a68:	10 82       	st	Z, r1
 a6a:	8a e0       	ldi	r24, 0x0A	; 10
	task1.period = 10;
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	a0 e0       	ldi	r26, 0x00	; 0
 a70:	b0 e0       	ldi	r27, 0x00	; 0
 a72:	81 83       	std	Z+1, r24	; 0x01
 a74:	92 83       	std	Z+2, r25	; 0x02
 a76:	a3 83       	std	Z+3, r26	; 0x03
 a78:	b4 83       	std	Z+4, r27	; 0x04
 a7a:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = task1.period;
 a7c:	96 83       	std	Z+6, r25	; 0x06
 a7e:	a7 83       	std	Z+7, r26	; 0x07
 a80:	b0 87       	std	Z+8, r27	; 0x08
 a82:	2f e2       	ldi	r18, 0x2F	; 47
	task1.TickFct = &gameTick;
 a84:	32 e0       	ldi	r19, 0x02	; 2
 a86:	32 87       	std	Z+10, r19	; 0x0a
 a88:	21 87       	std	Z+9, r18	; 0x09
 a8a:	ec ec       	ldi	r30, 0xCC	; 204
	
	task2.state = mapwait;
 a8c:	f1 e0       	ldi	r31, 0x01	; 1
 a8e:	10 82       	st	Z, r1
 a90:	44 e6       	ldi	r20, 0x64	; 100
	task2.period = 100;
 a92:	50 e0       	ldi	r21, 0x00	; 0
 a94:	60 e0       	ldi	r22, 0x00	; 0
 a96:	70 e0       	ldi	r23, 0x00	; 0
 a98:	41 83       	std	Z+1, r20	; 0x01
 a9a:	52 83       	std	Z+2, r21	; 0x02
 a9c:	63 83       	std	Z+3, r22	; 0x03
 a9e:	74 83       	std	Z+4, r23	; 0x04
 aa0:	45 83       	std	Z+5, r20	; 0x05
	task2.elapsedTime = task2.period;
 aa2:	56 83       	std	Z+6, r21	; 0x06
 aa4:	67 83       	std	Z+7, r22	; 0x07
 aa6:	70 87       	std	Z+8, r23	; 0x08
 aa8:	2f ea       	ldi	r18, 0xAF	; 175
	task2.TickFct = &mapTick;
 aaa:	34 e0       	ldi	r19, 0x04	; 4
 aac:	32 87       	std	Z+10, r19	; 0x0a
 aae:	21 87       	std	Z+9, r18	; 0x09
 ab0:	e1 ec       	ldi	r30, 0xC1	; 193
	
	task3.state = keypadwait;
 ab2:	f1 e0       	ldi	r31, 0x01	; 1
 ab4:	10 82       	st	Z, r1
 ab6:	81 83       	std	Z+1, r24	; 0x01
	task3.period = 10;
 ab8:	92 83       	std	Z+2, r25	; 0x02
 aba:	a3 83       	std	Z+3, r26	; 0x03
 abc:	b4 83       	std	Z+4, r27	; 0x04
 abe:	85 83       	std	Z+5, r24	; 0x05
	task3.elapsedTime = task3.period;
 ac0:	96 83       	std	Z+6, r25	; 0x06
 ac2:	a7 83       	std	Z+7, r26	; 0x07
 ac4:	b0 87       	std	Z+8, r27	; 0x08
 ac6:	23 e2       	ldi	r18, 0x23	; 35
	task3.TickFct = &keypadTick;
 ac8:	31 e0       	ldi	r19, 0x01	; 1
 aca:	32 87       	std	Z+10, r19	; 0x0a
 acc:	21 87       	std	Z+9, r18	; 0x09
 ace:	e6 eb       	ldi	r30, 0xB6	; 182
	
	task4.state = finalwait;
 ad0:	f1 e0       	ldi	r31, 0x01	; 1
 ad2:	10 82       	st	Z, r1
 ad4:	81 83       	std	Z+1, r24	; 0x01
	task4.period = 10;
 ad6:	92 83       	std	Z+2, r25	; 0x02
 ad8:	a3 83       	std	Z+3, r26	; 0x03
 ada:	b4 83       	std	Z+4, r27	; 0x04
 adc:	85 83       	std	Z+5, r24	; 0x05
	task4.elapsedTime = task4.period;
 ade:	96 83       	std	Z+6, r25	; 0x06
 ae0:	a7 83       	std	Z+7, r26	; 0x07
 ae2:	b0 87       	std	Z+8, r27	; 0x08
 ae4:	85 ed       	ldi	r24, 0xD5	; 213
	task4.TickFct = &finalTick;
 ae6:	91 e0       	ldi	r25, 0x01	; 1
 ae8:	92 87       	std	Z+10, r25	; 0x0a
 aea:	81 87       	std	Z+9, r24	; 0x09
 aec:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <tasks>
	*/

	/*
	GCD function 
	*/
	unsigned long GCD = tasks[0]->period;
 af0:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <tasks+0x1>
 af4:	81 80       	ldd	r8, Z+1	; 0x01
 af6:	92 80       	ldd	r9, Z+2	; 0x02
 af8:	a3 80       	ldd	r10, Z+3	; 0x03
 afa:	b4 80       	ldd	r11, Z+4	; 0x04
 afc:	cb e1       	ldi	r28, 0x1B	; 27
 afe:	d1 e0       	ldi	r29, 0x01	; 1
 b00:	0f 2e       	mov	r0, r31
 b02:	f1 e2       	ldi	r31, 0x21	; 33
 b04:	ef 2e       	mov	r14, r31
 b06:	f1 e0       	ldi	r31, 0x01	; 1
 b08:	ff 2e       	mov	r15, r31
 b0a:	f0 2d       	mov	r31, r0
 b0c:	e9 91       	ld	r30, Y+
	for(int i = 1;i <numTasks; i++){
		GCD = findGCD(GCD,tasks[i]->period);
 b0e:	f9 91       	ld	r31, Y+
 b10:	58 2d       	mov	r21, r8
 b12:	49 2d       	mov	r20, r9
 b14:	3a 2d       	mov	r19, r10
 b16:	2b 2d       	mov	r18, r11
 b18:	81 80       	ldd	r8, Z+1	; 0x01
 b1a:	92 80       	ldd	r9, Z+2	; 0x02
 b1c:	a3 80       	ldd	r10, Z+3	; 0x03
 b1e:	b4 80       	ldd	r11, Z+4	; 0x04
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <main+0xde>
 b22:	4b 01       	movw	r8, r22
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 b24:	5c 01       	movw	r10, r24
 b26:	65 2f       	mov	r22, r21
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 b28:	74 2f       	mov	r23, r20
 b2a:	83 2f       	mov	r24, r19
 b2c:	92 2f       	mov	r25, r18
 b2e:	a5 01       	movw	r20, r10
 b30:	94 01       	movw	r18, r8
 b32:	49 d0       	rcall	.+146    	; 0xbc6 <__udivmodsi4>
 b34:	58 2d       	mov	r21, r8
 b36:	49 2d       	mov	r20, r9
 b38:	3a 2d       	mov	r19, r10
 b3a:	2b 2d       	mov	r18, r11
 b3c:	61 15       	cp	r22, r1
		if( c == 0 ) { return b; }
 b3e:	71 05       	cpc	r23, r1
 b40:	81 05       	cpc	r24, r1
 b42:	91 05       	cpc	r25, r1
 b44:	71 f7       	brne	.-36     	; 0xb22 <main+0xda>
 b46:	ce 15       	cp	r28, r14

	/*
	GCD function 
	*/
	unsigned long GCD = tasks[0]->period;
	for(int i = 1;i <numTasks; i++){
 b48:	df 05       	cpc	r29, r15
 b4a:	01 f7       	brne	.-64     	; 0xb0c <main+0xc4>
 b4c:	62 e0       	ldi	r22, 0x02	; 2
		GCD = findGCD(GCD,tasks[i]->period);
	}
	TimerSet(2);
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	b9 da       	rcall	.-2702   	; 0xc8 <TimerSet>
	TimerOn();
 b56:	c9 da       	rcall	.-2670   	; 0xea <TimerOn>
 b58:	c9 e1       	ldi	r28, 0x19	; 25
 b5a:	d1 e0       	ldi	r29, 0x01	; 1
 b5c:	08 81       	ld	r16, Y
		/*
		Something Common
		*/

		for(i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period)
 b5e:	19 81       	ldd	r17, Y+1	; 0x01
 b60:	f8 01       	movw	r30, r16
 b62:	85 81       	ldd	r24, Z+5	; 0x05
 b64:	96 81       	ldd	r25, Z+6	; 0x06
 b66:	a7 81       	ldd	r26, Z+7	; 0x07
 b68:	b0 85       	ldd	r27, Z+8	; 0x08
 b6a:	41 81       	ldd	r20, Z+1	; 0x01
 b6c:	52 81       	ldd	r21, Z+2	; 0x02
 b6e:	63 81       	ldd	r22, Z+3	; 0x03
 b70:	74 81       	ldd	r23, Z+4	; 0x04
 b72:	84 17       	cp	r24, r20
 b74:	95 07       	cpc	r25, r21
 b76:	a6 07       	cpc	r26, r22
 b78:	b7 07       	cpc	r27, r23
 b7a:	89 f4       	brne	.+34     	; 0xb9e <main+0x156>
 b7c:	80 81       	ld	r24, Z
			{
				tasks[i]->state= tasks[i]->TickFct(tasks[i]->state);
 b7e:	01 84       	ldd	r0, Z+9	; 0x09
 b80:	f2 85       	ldd	r31, Z+10	; 0x0a
 b82:	e0 2d       	mov	r30, r0
 b84:	08 2e       	mov	r0, r24
 b86:	00 0c       	add	r0, r0
 b88:	99 0b       	sbc	r25, r25
 b8a:	09 95       	icall
 b8c:	d8 01       	movw	r26, r16
 b8e:	8c 93       	st	X, r24
 b90:	e8 81       	ld	r30, Y
				tasks[i]->elapsedTime = 0;
 b92:	f9 81       	ldd	r31, Y+1	; 0x01
 b94:	15 82       	std	Z+5, r1	; 0x05
 b96:	16 82       	std	Z+6, r1	; 0x06
 b98:	17 82       	std	Z+7, r1	; 0x07
 b9a:	10 86       	std	Z+8, r1	; 0x08
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <main+0x168>
 b9e:	88 0d       	add	r24, r8
			}
			else tasks[i]->elapsedTime += GCD;
 ba0:	99 1d       	adc	r25, r9
 ba2:	aa 1d       	adc	r26, r10
 ba4:	bb 1d       	adc	r27, r11
 ba6:	f8 01       	movw	r30, r16
 ba8:	85 83       	std	Z+5, r24	; 0x05
 baa:	96 83       	std	Z+6, r25	; 0x06
 bac:	a7 83       	std	Z+7, r26	; 0x07
 bae:	b0 87       	std	Z+8, r27	; 0x08
 bb0:	22 96       	adiw	r28, 0x02	; 2
 bb2:	ce 15       	cp	r28, r14
		//lcdMatrix();	
		/*
		Something Common
		*/

		for(i = 0; i < numTasks; i++){
 bb4:	df 05       	cpc	r29, r15
 bb6:	91 f6       	brne	.-92     	; 0xb5c <main+0x114>
 bb8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <TimerFlag>
				tasks[i]->state= tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			else tasks[i]->elapsedTime += GCD;
		}
			while(!TimerFlag);
 bbc:	88 23       	and	r24, r24
 bbe:	e1 f3       	breq	.-8      	; 0xbb8 <main+0x170>
 bc0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <TimerFlag>
			TimerFlag = 0;
 bc4:	c9 cf       	rjmp	.-110    	; 0xb58 <main+0x110>

00000bc6 <__udivmodsi4>:
	
	}
 bc6:	a1 e2       	ldi	r26, 0x21	; 33
 bc8:	1a 2e       	mov	r1, r26
 bca:	aa 1b       	sub	r26, r26
 bcc:	bb 1b       	sub	r27, r27
 bce:	fd 01       	movw	r30, r26
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <__udivmodsi4_ep>

00000bd2 <__udivmodsi4_loop>:
 bd2:	aa 1f       	adc	r26, r26
 bd4:	bb 1f       	adc	r27, r27
 bd6:	ee 1f       	adc	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	a2 17       	cp	r26, r18
 bdc:	b3 07       	cpc	r27, r19
 bde:	e4 07       	cpc	r30, r20
 be0:	f5 07       	cpc	r31, r21
 be2:	20 f0       	brcs	.+8      	; 0xbec <__udivmodsi4_ep>
 be4:	a2 1b       	sub	r26, r18
 be6:	b3 0b       	sbc	r27, r19
 be8:	e4 0b       	sbc	r30, r20
 bea:	f5 0b       	sbc	r31, r21

00000bec <__udivmodsi4_ep>:
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	1a 94       	dec	r1
 bf6:	69 f7       	brne	.-38     	; 0xbd2 <__udivmodsi4_loop>
 bf8:	60 95       	com	r22
 bfa:	70 95       	com	r23
 bfc:	80 95       	com	r24
 bfe:	90 95       	com	r25
 c00:	9b 01       	movw	r18, r22
 c02:	ac 01       	movw	r20, r24
 c04:	bd 01       	movw	r22, r26
 c06:	cf 01       	movw	r24, r30
 c08:	08 95       	ret

00000c0a <eeprom_read_byte>:
 c0a:	f9 99       	sbic	0x1f, 1	; 31
 c0c:	fe cf       	rjmp	.-4      	; 0xc0a <eeprom_read_byte>
 c0e:	92 bd       	out	0x22, r25	; 34
 c10:	81 bd       	out	0x21, r24	; 33
 c12:	f8 9a       	sbi	0x1f, 0	; 31
 c14:	99 27       	eor	r25, r25
 c16:	80 b5       	in	r24, 0x20	; 32
 c18:	08 95       	ret

00000c1a <eeprom_write_byte>:
 c1a:	26 2f       	mov	r18, r22

00000c1c <eeprom_write_r18>:
 c1c:	f9 99       	sbic	0x1f, 1	; 31
 c1e:	fe cf       	rjmp	.-4      	; 0xc1c <eeprom_write_r18>
 c20:	1f ba       	out	0x1f, r1	; 31
 c22:	92 bd       	out	0x22, r25	; 34
 c24:	81 bd       	out	0x21, r24	; 33
 c26:	20 bd       	out	0x20, r18	; 32
 c28:	0f b6       	in	r0, 0x3f	; 63
 c2a:	f8 94       	cli
 c2c:	fa 9a       	sbi	0x1f, 2	; 31
 c2e:	f9 9a       	sbi	0x1f, 1	; 31
 c30:	0f be       	out	0x3f, r0	; 63
 c32:	01 96       	adiw	r24, 0x01	; 1
 c34:	08 95       	ret

00000c36 <_exit>:
 c36:	f8 94       	cli

00000c38 <__stop_program>:
 c38:	ff cf       	rjmp	.-2      	; 0xc38 <__stop_program>
